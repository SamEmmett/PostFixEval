// ***************************************************************//   StackTest.java////   A simple driver to test a stack.//// ***************************************************************import java.util.*;import java.io.*;@SuppressWarnings("unused")public class StackTest {	@SuppressWarnings({ "unchecked", "rawtypes" })	public static void main(String[] args) {// Declare and instantiate a stack		Stack stack = new Stack();//push some stuff on the stack		for (int i = 0; i < 10; i++)			stack.push(i);		stack.push(5);// call printStack to print the stack		printStack(stack);// call reverseStack to reverse the stack		stack = reverseStack(stack);// call printStack to print the stack again		printStack(stack);// call removeElement to remove all occurrences of the value 5 - save the stack returned from this call		Stack oldStack = new Stack();				oldStack.addAll(stack); 				stack = removeElement(stack);// call printStack to print the original stack and the new stack.				System.out.println("The old Stack is: ");		printStack(oldStack);		System.out.println("The new Stack is: ");		printStack(stack);	}	private static Stack removeElement(Stack stack) {		Stack temp = new Stack();		Stack tempRemoved = new Stack();		while (stack.isEmpty() == false) {			int value = (int) stack.peek();			if (value == 5) {				tempRemoved.push(stack.pop());			} else {				temp.push(stack.pop());			}		}		stack = reverseStack(temp);		return stack;	}	@SuppressWarnings("unchecked")	private static Stack reverseStack(Stack stack) {		Stack temp = new Stack();		while (stack.isEmpty() != true) {			temp.push(stack.pop());		}		stack = temp;		return stack;	}	@SuppressWarnings("unchecked")	private static void printStack(Stack stack) {		stack.forEach(s -> {			System.out.print(s + " ");		});		System.out.println();	}}